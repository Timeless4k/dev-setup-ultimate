#!/bin/bash
# ========================================================================
#  DEV-SETUP - Modular Development Environment Setup
#  Version: 1.0
#  License: MIT
# ========================================================================
# A modular, customizable framework for setting up development environments
# across different platforms (Linux, macOS, WSL).
# ========================================================================

# Default configuration file location
CONFIG_FILE="$HOME/.dev-setup/config.sh"
SCRIPTS_DIR="$HOME/.dev-setup/modules"
LOGS_DIR="$HOME/.dev-setup/logs"

# Create necessary directories
mkdir -p "$HOME/.dev-setup/"{modules,logs,config}

# Setup logging
LOG_FILE="$LOGS_DIR/setup_$(date +%Y-%m-%d_%H-%M-%S).log"
touch "$LOG_FILE"

# ======= Helper Functions =======
success() {
    echo -e "\e[32m✅ $1\e[0m"
    echo "$(date +"%Y-%m-%d %H:%M:%S") [SUCCESS] $1" >> "$LOG_FILE"
}

info() {
    echo -e "\e[34mℹ️ $1\e[0m"
    echo "$(date +"%Y-%m-%d %H:%M:%S") [INFO] $1" >> "$LOG_FILE"
}

warning() {
    echo -e "\e[33m⚠️ $1\e[0m"
    echo "$(date +"%Y-%m-%d %H:%M:%S") [WARNING] $1" >> "$LOG_FILE"
}

error() {
    echo -e "\e[31m❌ $1\e[0m"
    echo "$(date +"%Y-%m-%d %H:%M:%S") [ERROR] $1" >> "$LOG_FILE"
}

# Detect platform - WSL, Linux, or macOS
detect_platform() {
    if grep -q Microsoft /proc/version 2>/dev/null; then
        echo "wsl"
    elif [[ "$(uname)" == "Darwin" ]]; then
        echo "macos"
    else
        echo "linux"
    fi
}

PLATFORM=$(detect_platform)

# Load configuration or create if it doesn't exist
if [ ! -f "$CONFIG_FILE" ]; then
    info "First run detected - creating configuration file"
    
    # Get user input for configuration
    read -p "Enter your full name [$(whoami)]: " user_name
    user_name=${user_name:-$(whoami)}
    
    read -p "Enter your email: " user_email
    
    read -p "Enter your GitHub username [${user_name}]: " github_username
    github_username=${github_username:-${user_name}}
    
    read -p "Enter projects directory [$HOME/Projects]: " projects_dir
    projects_dir=${projects_dir:-"$HOME/Projects"}
    
    # Create configuration file
    cat > "$CONFIG_FILE" << EOL
#!/bin/bash
# DEV-SETUP Configuration File
# This file is automatically generated and can be manually edited

# User information
USER_NAME="$user_name"
USER_EMAIL="$user_email"
GITHUB_USERNAME="$github_username"

# Directories
PROJECTS_DIR="$projects_dir"
SCRIPTS_DIR="$HOME/.dev-setup/modules"
CONFIG_DIR="$HOME/.dev-setup/config"

# Create these project folders during setup (space-separated)
PROJECT_FOLDERS="web-projects experiments notebooks"

# Custom settings
DEFAULT_BROWSER="brave"  # Options: brave, chrome, firefox
DEFAULT_SEARCH="google"  # Options: google, duckduckgo, brave
BACKUP_RETENTION_DAYS=30
BACKUP_ENCRYPT=true
BACKUP_LOCATION="$HOME/Backups"
EOL

    chmod +x "$CONFIG_FILE"
    success "Configuration file created at $CONFIG_FILE"
fi

# Source the configuration
source "$CONFIG_FILE"

# ======= Menu Functions =======
show_menu() {
    clear
    echo -e "\e[1;36m========================================\e[0m"
    echo -e "\e[1;36m    🚀 DEVELOPMENT ENVIRONMENT SETUP    \e[0m"
    echo -e "\e[1;36m========================================\e[0m"
    echo -e "\e[1;33m1. 💻 Full Development Environment Setup\e[0m"
    echo -e "\e[1;33m2. 🌐 Browser & Privacy Optimizer\e[0m"
    echo -e "\e[1;33m3. 🧠 Create AI Modeling Workspace\e[0m"
    echo -e "\e[1;33m4. 🪄 Clean Slate Windows Configuration\e[0m"
    echo -e "\e[1;33m5. 🗂️ Setup Downloads Organizer\e[0m"
    echo -e "\e[1;33m6. 🧱 Setup Dotfiles Syncer\e[0m"
    echo -e "\e[1;33m7. 📦 Create System Backup\e[0m"
    echo -e "\e[1;33m8. 📋 Setup Academic Project Tracker\e[0m"
    echo -e "\e[1;33m9. ⚙️ Configure Settings\e[0m"
    echo -e "\e[1;33m0. ❌ Exit\e[0m"
    echo -e "\e[1;36m========================================\e[0m"
    echo -ne "\e[1;32mEnter your choice [0-9]: \e[0m"
    read choice

    case $choice in
        1) run_module "dev_environment.sh" ;;
        2) run_module "browser_privacy.sh" ;;
        3) run_module "ai_workspace.sh" ;;
        4) run_module "clean_slate.sh" ;;
        5) run_module "downloads_organizer.sh" ;;
        6) run_module "dotfiles_syncer.sh" ;;
        7) run_module "system_backup.sh" ;;
        8) run_module "academic_tracker.sh" ;;
        9) update_configuration ;;
        0) exit 0 ;;
        *) warning "Invalid option. Please try again."; show_menu ;;
    esac
}

# Run a module with error handling
run_module() {
    local module_name="$1"
    local module_path="$SCRIPTS_DIR/$module_name"
    
    # Check if module exists
    if [ ! -f "$module_path" ]; then
        # Try to download the module
        download_module "$module_name"
        
        # Check again if module exists
        if [ ! -f "$module_path" ]; then
            error "Module $module_name not found"
            read -p "Press Enter to return to the main menu..."
            show_menu
            return
        fi
    fi
    
    # Make sure the module is executable
    chmod +x "$module_path"
    
    # Run the module with configuration
    "$module_path" "$CONFIG_FILE"
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        success "Module $module_name completed successfully"
    else
        error "Module $module_name failed with exit code $exit_code"
    fi
    
    read -p "Press Enter to return to the main menu..."
    show_menu
}

# Download a module if it doesn't exist locally
download_module() {
    local module_name="$1"
    info "Module $module_name not found locally. Attempting to download..."
    
    # This is where you would implement logic to download modules
    # For now we'll just create placeholder modules for demonstration
    create_placeholder_module "$module_name"
}

# Create a placeholder module for demonstration
create_placeholder_module() {
    local module_name="$1"
    local module_path="$SCRIPTS_DIR/$module_name"
    
    # Extract module base name without extension
    local base_name=$(basename "$module_name" .sh)
    
    # Create a basic module template
    cat > "$module_path" << EOL
#!/bin/bash
# $base_name Module
# This is a placeholder module created during setup

# Get configuration file path from arguments
CONFIG_FILE="\$1"

# Load configuration if provided
if [ -n "\$CONFIG_FILE" ] && [ -f "\$CONFIG_FILE" ]; then
    source "\$CONFIG_FILE"
fi

echo "🚧 This module ($base_name) is under construction."
echo "In a complete implementation, it would provide functionality for:"

case "$base_name" in
    dev_environment)
        echo "- Setting up a complete development environment"
        echo "- Installing languages, tools, and frameworks"
        echo "- Configuring Git, shells, and environment settings"
        ;;
    browser_privacy)
        echo "- Installing and configuring privacy-focused browsers"
        echo "- Setting up browser extensions for privacy and development"
        echo "- Configuring system privacy settings"
        ;;
    ai_workspace)
        echo "- Creating a structured AI/ML project workspace"
        echo "- Setting up Python virtual environment with ML libraries"
        echo "- Downloading sample datasets and creating starter notebooks"
        ;;
    clean_slate_config)
        echo "- Optimizing Windows for development"
        echo "- Disabling unnecessary services and features"
        echo "- Configuring Windows-specific developer settings"
        ;;
    downloads_organizer)
        echo "- Setting up automated downloads folder organization"
        echo "- Configuring file sorting by type and cleaning old files"
        echo "- Creating scheduled tasks for regular organization"
        ;;
    dotfiles_syncer)
        echo "- Setting up a Git repository for dotfiles"
        echo "- Creating sync scripts for backing up and restoring configurations"
        echo "- Managing configuration across multiple machines"
        ;;
    system_backup)
        echo "- Creating comprehensive system backup scripts"
        echo "- Setting up encrypted backups to local or cloud storage"
        echo "- Configuring backup rotation and scheduling"
        ;;
    academic_tracker)
        echo "- Setting up a project tracking system for academic work"
        echo "- Creating a task management system with due dates"
        echo "- Organizing academic projects and resources"
        ;;
    *)
        echo "- General functionality for $base_name"
        ;;
esac

# Return success
exit 0
EOL

    chmod +x "$module_path"
    info "Created placeholder for $module_name"
}

# Update configuration
update_configuration() {
    info "Updating configuration..."
    
    # Make a backup of the current configuration
    cp "$CONFIG_FILE" "$CONFIG_FILE.backup.$(date +%Y%m%d%H%M%S)"
    
    # Get user input for configuration
    read -p "Enter your full name [$USER_NAME]: " user_name
    user_name=${user_name:-$USER_NAME}
    
    read -p "Enter your email [$USER_EMAIL]: " user_email
    user_email=${user_email:-$USER_EMAIL}
    
    read -p "Enter your GitHub username [$GITHUB_USERNAME]: " github_username
    github_username=${github_username:-$GITHUB_USERNAME}
    
    read -p "Enter projects directory [$PROJECTS_DIR]: " projects_dir
    projects_dir=${projects_dir:-$PROJECTS_DIR}
    
    read -p "Enter project folders (space-separated) [$PROJECT_FOLDERS]: " project_folders
    project_folders=${project_folders:-$PROJECT_FOLDERS}
    
    read -p "Default browser (brave/chrome/firefox) [$DEFAULT_BROWSER]: " browser
    browser=${browser:-$DEFAULT_BROWSER}
    
    read -p "Default search engine (google/duckduckgo/brave) [$DEFAULT_SEARCH]: " search
    search=${search:-$DEFAULT_SEARCH}
    
    read -p "Backup retention days [$BACKUP_RETENTION_DAYS]: " retention
    retention=${retention:-$BACKUP_RETENTION_DAYS}
    
    read -p "Enable backup encryption (true/false) [$BACKUP_ENCRYPT]: " encrypt
    encrypt=${encrypt:-$BACKUP_ENCRYPT}
    
    read -p "Backup location [$BACKUP_LOCATION]: " backup_location
    backup_location=${backup_location:-$BACKUP_LOCATION}
    
    # Update configuration file
    cat > "$CONFIG_FILE" << EOL
#!/bin/bash
# DEV-SETUP Configuration File
# This file is automatically generated and can be manually edited

# User information
USER_NAME="$user_name"
USER_EMAIL="$user_email"
GITHUB_USERNAME="$github_username"

# Directories
PROJECTS_DIR="$projects_dir"
SCRIPTS_DIR="$HOME/.dev-setup/modules"
CONFIG_DIR="$HOME/.dev-setup/config"

# Create these project folders during setup (space-separated)
PROJECT_FOLDERS="$project_folders"

# Custom settings
DEFAULT_BROWSER="$browser"  # Options: brave, chrome, firefox
DEFAULT_SEARCH="$search"  # Options: google, duckduckgo, brave
BACKUP_RETENTION_DAYS=$retention
BACKUP_ENCRYPT=$encrypt
BACKUP_LOCATION="$backup_location"
EOL

    success "Configuration updated at $CONFIG_FILE"
    read -p "Press Enter to return to the main menu..."
    show_menu
}

# ======= Main Script =======

# Ensure all expected directories exist
mkdir -p "$SCRIPTS_DIR" "$LOGS_DIR" "$CONFIG_DIR" "$PROJECTS_DIR"

# Display welcome message on first run
if [ ! -f "$SCRIPTS_DIR/.initialized" ]; then
    clear
    echo -e "\e[1;36m=========================================\e[0m"
    echo -e "\e[1;36m    🚀 DEV-SETUP - FIRST TIME SETUP     \e[0m"
    echo -e "\e[1;36m=========================================\e[0m"
    echo -e "\e[1;33mWelcome to DEV-SETUP!\e[0m"
    echo ""
    echo -e "This tool provides a modular approach to setting up"
    echo -e "your development environment across different platforms."
    echo ""
    echo -e "Each component can be installed and configured"
    echo -e "independently, making it easy to customize your setup."
    echo ""
    echo -e "\e[1;36m=========================================\e[0m"
    echo ""
    read -p "Press Enter to continue..."
    
    # Mark as initialized
    touch "$SCRIPTS_DIR/.initialized"
fi

# Show the main menu
show_menu
